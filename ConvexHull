#include <iostream>
#include <vector>

using namespace std;

int main() {

    vector<pair<int, int>> ConvexHull(vector<pair<int, int>>);

    vector<pair<int, int>> pontos;
    pontos.push_back(make_pair(2, 3));
    pontos.push_back(make_pair(3, 4));
    pontos.push_back(make_pair(1, 7));
    pontos.push_back(make_pair(5, 9));
    pontos.push_back(make_pair(0, 8));
    pontos.push_back(make_pair(7, 4));
    pontos.push_back(make_pair(6, 5));
    pontos.push_back(make_pair(3, 8));
    pontos.push_back(make_pair(1, 5));
    pontos.push_back(make_pair(0, 0));


    vector<pair<int, int>> resultado;
    resultado = ConvexHull(pontos);

    for (rsize_t i = 0; i < resultado.size(); i++) {
        cout << resultado[i].first << " " << resultado[i].second << "\n";
    }

}


vector<pair<int, int>> ConvexHull(vector<pair<int, int>> l) {

    vector<pair<int, int>> bases;
    
    for (int i = 0; i < l.size(); i++) {
        for (int j = i + 1; j < l.size(); j++) {
            float b = (l[i].first - l[j].first);
            float a = (l[j].second - l[i].second);
            float c = (l[i].first * l[j].second) - (l[i].second * l[j].first);

            bool linha = true;
            float controle = 0;
            for (int k = 0; k < l.size(); k++) {
                float valor = a * l[k].first + b * l[k].second - c;
                if (controle == 0) {
                    controle = valor;
                }
                else {
                    if (controle * valor > 0) {
                        controle = valor;
                    }
                    else if (controle * valor < 0) {
                        linha = false;
                    }
                }
            }
            if (linha) {
                bases.push_back(make_pair(i, j));
            }
        }
    }
    return bases;  
}
