// Dijkstra.cpp : Este arquivo contém a função 'main'. A execução do programa começa e termina ali.
//

#include <iostream>
#include <vector>

using namespace std;


vector<pair<int, int>> Dijkstra(vector<vector<int>> v) {
    vector<pair<int,int>> p;
    vector<pair<int, int>> result;

    //percorrendo o vetor para encontrar os short paths de cada vertice e salvando em p
    for (int i = 0; i < v.size(); i++) {
        int pos , val = INT_MAX;
        for (int j = 0; j < v[i].size(); j++) {
            if (v[i][j] > 0 &&
                v[i][j] < val
                ) {
                val = v[i][j];
                pos = j;
            }

        }
        p.push_back(make_pair(pos, val));        
    }   
          

    //salva o primeiro em resultado final
    result.push_back(make_pair(0,0));

    
    //percorre o p e vai encontrando os vértices
    vector<bool> passou (p.size(), false);  

    int i = 0;
    while (!passou[i] && i != p.size()-1 ) {

        if (i == 0) {
            passou[0] = true;
        }
        int val = INT_MAX;
        pair<int, int> pair;
        int position;

        for (int j = 0; j < p.size(); j++) {
            if (!passou[j] &&                
                v[i][j] != 0 &&
                v[i][j] < val) {
                val = v[i][j];
                position = j;            
            }
        }
       
        result.push_back(make_pair(position, val + result[result.size() - 1].second));
        passou[i] = true;
        i = position;       
                
    }
    
    return result;

}

int main()
{
    vector<vector<int>> graph = {
        {0,3,0,7,0},
        {3,0,4,2,0},
        {0,4,0,5,6},
        {0,2,5,0,4},
        {0,0,6,4,0} };

    vector<pair<int, int>> result = Dijkstra(graph);
    for (int i = 0; i < result.size(); i++) {
       cout << result[i].first << " " << result[i].second<<endl;
    }
    
}
